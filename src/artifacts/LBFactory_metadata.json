{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Create2EmptyBytecode",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Create2FailedDeployment",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "Create2InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "key",
						"type": "bytes32"
					}
				],
				"name": "EnumerableMapNonexistentKey",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBFactory__AddressZero",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "LBFactory__BinStepHasNoPreset",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "LBFactory__BinStepTooLow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBFactory__CannotGrantDefaultAdminRole",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "fees",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxFees",
						"type": "uint256"
					}
				],
				"name": "LBFactory__FlashLoanFeeAboveMax",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					}
				],
				"name": "LBFactory__IdenticalAddresses",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBFactory__InvalidHooksParameters",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_binStep",
						"type": "uint256"
					}
				],
				"name": "LBFactory__LBPairAlreadyExists",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "LBFactory__LBPairDoesNotExist",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "LBFactory__LBPairNotCreated",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "LBPairImplementation",
						"type": "address"
					}
				],
				"name": "LBFactory__LBPairSafetyCheckFailed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "LBFactory__PresetIsLockedForUsers",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBFactory__PresetOpenStateIsAlreadyInTheSameState",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "quoteAsset",
						"type": "address"
					}
				],
				"name": "LBFactory__QuoteAssetAlreadyWhitelisted",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "quoteAsset",
						"type": "address"
					}
				],
				"name": "LBFactory__QuoteAssetNotWhitelisted",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "LBFactory__SameFeeRecipient",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "flashLoanFee",
						"type": "uint256"
					}
				],
				"name": "LBFactory__SameFlashLoanFee",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "hooksImplementation",
						"type": "address"
					}
				],
				"name": "LBFactory__SameHooksImplementation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "hooksParameters",
						"type": "bytes32"
					}
				],
				"name": "LBFactory__SameHooksParameters",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "LBPairImplementation",
						"type": "address"
					}
				],
				"name": "LBFactory__SameImplementation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PairParametersHelper__InvalidParameter",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SafeCast__Exceeds16Bits",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "x",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "y",
						"type": "int256"
					}
				],
				"name": "Uint128x128Math__PowUnderflow",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldRecipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newRecipient",
						"type": "address"
					}
				],
				"name": "FeeRecipientSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldFlashLoanFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newFlashLoanFee",
						"type": "uint256"
					}
				],
				"name": "FlashLoanFeeSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "contract ILBPair",
						"name": "LBPair",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					}
				],
				"name": "LBPairCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract ILBPair",
						"name": "LBPair",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "ignored",
						"type": "bool"
					}
				],
				"name": "LBPairIgnoredStateChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "oldLBPairImplementation",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "LBPairImplementation",
						"type": "address"
					}
				],
				"name": "LBPairImplementationSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bool",
						"name": "isOpen",
						"type": "bool"
					}
				],
				"name": "PresetOpenStateChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "PresetRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "baseFactor",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "filterPeriod",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "decayPeriod",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "reductionFactor",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableFeeControl",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "protocolShare",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "maxVolatilityAccumulator",
						"type": "uint256"
					}
				],
				"name": "PresetSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "quoteAsset",
						"type": "address"
					}
				],
				"name": "QuoteAssetAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IERC20",
						"name": "quoteAsset",
						"type": "address"
					}
				],
				"name": "QuoteAssetRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LB_HOOKS_MANAGER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LB_PAIR_BEACON_IMPLEMENTATION_PAUSER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "quoteAsset",
						"type": "address"
					}
				],
				"name": "addQuoteAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "activeId",
						"type": "uint24"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					}
				],
				"name": "createLBPair",
				"outputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					}
				],
				"name": "forceDecay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllBinSteps",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "binStepWithPreset",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					}
				],
				"name": "getAllLBPairs",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "binStep",
								"type": "uint16"
							},
							{
								"internalType": "contract ILBPair",
								"name": "LBPair",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "createdByOwner",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "ignoredForRouting",
								"type": "bool"
							}
						],
						"internalType": "struct ILBFactory.LBPairInformation[]",
						"name": "lbPairsAvailable",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFeeRecipient",
				"outputs": [
					{
						"internalType": "address",
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFlashLoanFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "flashLoanFee",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getLBPairAtIndex",
				"outputs": [
					{
						"internalType": "contract ILBPair",
						"name": "lbPair",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLBPairBeacon",
				"outputs": [
					{
						"internalType": "address",
						"name": "lbPairBeacon",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "getLBPairInformation",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "binStep",
								"type": "uint16"
							},
							{
								"internalType": "contract ILBPair",
								"name": "LBPair",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "createdByOwner",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "ignoredForRouting",
								"type": "bool"
							}
						],
						"internalType": "struct ILBFactory.LBPairInformation",
						"name": "lbPairInformation",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMaxFlashLoanFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "maxFee",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMinBinStep",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "minBinStep",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfLBPairs",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "lbPairNumber",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfQuoteAssets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "numberOfQuoteAssets",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOpenBinSteps",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "openBinStep",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPauserRole",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "getPreset",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "baseFactor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "filterPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "decayPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reductionFactor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "variableFeeControl",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolShare",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxVolatilityAccumulator",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isOpen",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getQuoteAssetAtIndex",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "asset",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "feeRecipient",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "flashLoanFee",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "lbPairBeaconAddress",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					}
				],
				"name": "isQuoteAsset",
				"outputs": [
					{
						"internalType": "bool",
						"name": "isQuote",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					}
				],
				"name": "removeLBHooksOnPair",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					}
				],
				"name": "removePreset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "quoteAsset",
						"type": "address"
					}
				],
				"name": "removeQuoteAsset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "feeRecipient",
						"type": "address"
					}
				],
				"name": "setFeeRecipient",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "baseFactor",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "filterPeriod",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "decayPeriod",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "reductionFactor",
						"type": "uint16"
					},
					{
						"internalType": "uint24",
						"name": "variableFeeControl",
						"type": "uint24"
					},
					{
						"internalType": "uint16",
						"name": "protocolShare",
						"type": "uint16"
					},
					{
						"internalType": "uint24",
						"name": "maxVolatilityAccumulator",
						"type": "uint24"
					}
				],
				"name": "setFeesParametersOnPair",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "flashLoanFee",
						"type": "uint256"
					}
				],
				"name": "setFlashLoanFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "bytes32",
						"name": "hooksParameters",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "onHooksSetData",
						"type": "bytes"
					}
				],
				"name": "setLBHooksParametersOnPair",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "bool",
						"name": "ignored",
						"type": "bool"
					}
				],
				"name": "setLBPairIgnored",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "baseFactor",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "filterPeriod",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "decayPeriod",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "reductionFactor",
						"type": "uint16"
					},
					{
						"internalType": "uint24",
						"name": "variableFeeControl",
						"type": "uint24"
					},
					{
						"internalType": "uint16",
						"name": "protocolShare",
						"type": "uint16"
					},
					{
						"internalType": "uint24",
						"name": "maxVolatilityAccumulator",
						"type": "uint24"
					},
					{
						"internalType": "bool",
						"name": "isOpen",
						"type": "bool"
					}
				],
				"name": "setPreset",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "bool",
						"name": "isOpen",
						"type": "bool"
					}
				],
				"name": "setPresetOpenState",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				],
				"Create2EmptyBytecode()": [
					{
						"details": "There's no code to deploy."
					}
				],
				"Create2FailedDeployment()": [
					{
						"details": "The deployment failed."
					}
				],
				"Create2InsufficientBalance(uint256,uint256)": [
					{
						"details": "Not enough balance for performing a CREATE2 deploy."
					}
				],
				"EnumerableMapNonexistentKey(bytes32)": [
					{
						"details": "Query for a nonexistent map key."
					}
				],
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				}
			},
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"addQuoteAsset(address)": {
					"details": "Needs to be called by the owner Reverts if: - The quoteAsset is already whitelisted",
					"params": {
						"quoteAsset": "The quote asset (e.g: NATIVE, USDC...)"
					}
				},
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor"
				},
				"createLBPair(address,address,uint24,uint16)": {
					"params": {
						"activeId": "The active id of the pair",
						"binStep": "The bin step in basis point, used to calculate log(1 + binStep / 10_000)",
						"tokenX": "The address of the first token",
						"tokenY": "The address of the second token"
					},
					"returns": {
						"pair": "The address of the newly created LBPair"
					}
				},
				"forceDecay(address)": {
					"details": "Needs to be called by the owner",
					"params": {
						"pair": "The pair to force the decay"
					}
				},
				"getAllBinSteps()": {
					"returns": {
						"binStepWithPreset": "The list of binStep"
					}
				},
				"getAllLBPairs(address,address)": {
					"params": {
						"tokenX": "The first token of the pair",
						"tokenY": "The second token of the pair"
					},
					"returns": {
						"lbPairsAvailable": "The list of available LBPairs"
					}
				},
				"getFeeRecipient()": {
					"returns": {
						"feeRecipient": "feeRecipient"
					}
				},
				"getFlashLoanFee()": {
					"returns": {
						"flashLoanFee": "The fee for flash loans, in 1e18"
					}
				},
				"getLBPairAtIndex(uint256)": {
					"params": {
						"index": "The index"
					},
					"returns": {
						"lbPair": "The address of the LBPair at index `index`"
					}
				},
				"getLBPairBeacon()": {
					"returns": {
						"lbPairBeacon": "The address of the LBPair beacon"
					}
				},
				"getLBPairInformation(address,address,uint256)": {
					"params": {
						"binStep": "The bin step of the LBPair",
						"tokenA": "The address of the first token of the pair",
						"tokenB": "The address of the second token of the pair"
					},
					"returns": {
						"lbPairInformation": "The LBPairInformation"
					}
				},
				"getMaxFlashLoanFee()": {
					"returns": {
						"maxFee": "maxFee"
					}
				},
				"getMinBinStep()": {
					"returns": {
						"minBinStep": "minBinStep"
					}
				},
				"getNumberOfLBPairs()": {
					"returns": {
						"lbPairNumber": "lbPairNumber"
					}
				},
				"getNumberOfQuoteAssets()": {
					"returns": {
						"numberOfQuoteAssets": "The number of quote assets"
					}
				},
				"getOpenBinSteps()": {
					"returns": {
						"openBinStep": "The list of open binSteps"
					}
				},
				"getPreset(uint256)": {
					"params": {
						"binStep": "The bin step of the preset"
					},
					"returns": {
						"baseFactor": "The base factor",
						"decayPeriod": "The decay period of the preset",
						"filterPeriod": "The filter period of the preset",
						"isOpen": "Whether the preset is open or not",
						"maxVolatilityAccumulator": "The max volatility accumulator of the preset",
						"protocolShare": "The protocol share of the preset",
						"reductionFactor": "The reduction factor of the preset",
						"variableFeeControl": "The variable fee control of the preset"
					}
				},
				"getQuoteAssetAtIndex(uint256)": {
					"params": {
						"index": "The index"
					},
					"returns": {
						"asset": "The address of the quoteAsset at index `index`"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"params": {
						"account": "The address to check",
						"role": "The role to check"
					},
					"returns": {
						"_0": "Whether the account has the role or not"
					}
				},
				"initialize(address,address,uint256,address)": {
					"params": {
						"feeRecipient": "The address of the fee recipient",
						"flashLoanFee": "The value of the fee for flash loan"
					}
				},
				"isQuoteAsset(address)": {
					"params": {
						"token": "The address of the asset"
					},
					"returns": {
						"isQuote": "Whether the token is a quote asset or not"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"removeLBHooksOnPair(address,address,uint16)": {
					"details": "Needs to be called by an address with the LB_HOOKS_MANAGER_ROLE Reverts if: - The pair doesn't exist",
					"params": {
						"binStep": "The bin step in basis point, used to calculate the price",
						"tokenX": "The address of the first token",
						"tokenY": "The address of the second token"
					}
				},
				"removePreset(uint16)": {
					"details": "Needs to be called by the owner Reverts if: - The binStep doesn't have a preset",
					"params": {
						"binStep": "The bin step to remove"
					}
				},
				"removeQuoteAsset(address)": {
					"details": "Needs to be called by the owner Reverts if: - The quoteAsset was not whitelisted",
					"params": {
						"quoteAsset": "The quote asset (e.g: NATIVE, USDC...)"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"setFeeRecipient(address)": {
					"details": "Needs to be called by the owner Reverts if: - The feeRecipient is `address(0)` - The feeRecipient is the same as the current one",
					"params": {
						"feeRecipient": "The address of the recipient"
					}
				},
				"setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)": {
					"details": "Needs to be called by the owner Reverts if: - The pair doesn't exist",
					"params": {
						"baseFactor": "The base factor, used to calculate the base fee, baseFee = baseFactor * binStep",
						"binStep": "The bin step in basis point, used to calculate the price",
						"decayPeriod": "The period where the accumulator value is decayed, by the reduction factor",
						"filterPeriod": "The period where the accumulator value is untouched, prevent spam",
						"maxVolatilityAccumulator": "The max value of volatility accumulator",
						"protocolShare": "The share of the fees received by the protocol",
						"reductionFactor": "The reduction factor, used to calculate the reduction of the accumulator",
						"tokenX": "The address of the first token",
						"tokenY": "The address of the second token",
						"variableFeeControl": "The variable fee control, used to control the variable fee, can be 0 to disable it"
					}
				},
				"setFlashLoanFee(uint256)": {
					"details": "Needs to be called by the owner Reverts if: - The flashLoanFee is the same as the current one - The flashLoanFee is above the maximum flash loan fee",
					"params": {
						"flashLoanFee": "The value of the fee for flash loan"
					}
				},
				"setLBHooksParametersOnPair(address,address,uint16,bytes32,bytes)": {
					"details": "Needs to be called by an address with the LB_HOOKS_MANAGER_ROLE Reverts if: - The pair doesn't exist - The hooks is `address(0)` or the hooks flags are all false",
					"params": {
						"binStep": "The bin step in basis point, used to calculate the price",
						"hooksParameters": "The hooks parameters",
						"onHooksSetData": "The data to pass to the onHooksSet function",
						"tokenX": "The address of the first token",
						"tokenY": "The address of the second token"
					}
				},
				"setLBPairIgnored(address,address,uint16,bool)": {
					"details": "Needs to be called by the owner Reverts if: - The pair doesn't exist - The ignored state is already in the same state",
					"params": {
						"binStep": "The bin step in basis point of the pair",
						"ignored": "Whether to ignore (true) or not (false) the pair for routing",
						"tokenX": "The address of the first token of the pair",
						"tokenY": "The address of the second token of the pair"
					}
				},
				"setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)": {
					"details": "Needs to be called by the owner Reverts if: - The binStep is lower than the minimum bin step",
					"params": {
						"baseFactor": "The base factor, used to calculate the base fee, baseFee = baseFactor * binStep",
						"binStep": "The bin step in basis point, used to calculate the price",
						"decayPeriod": "The period where the accumulator value is decayed, by the reduction factor",
						"filterPeriod": "The period where the accumulator value is untouched, prevent spam",
						"maxVolatilityAccumulator": "The max value of the volatility accumulator",
						"protocolShare": "The share of the fees received by the protocol",
						"reductionFactor": "The reduction factor, used to calculate the reduction of the accumulator",
						"variableFeeControl": "The variable fee control, used to control the variable fee, can be 0 to disable it"
					}
				},
				"setPresetOpenState(uint16,bool)": {
					"details": "Needs to be called by the owner Reverts if: - The binStep doesn't have a preset - The preset is already in the same state",
					"params": {
						"binStep": "The bin step in basis point, used to calculate the price",
						"isOpen": "Whether the preset is open or not"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
				}
			},
			"stateVariables": {
				"_availableLBPairBinSteps": {
					"details": "Mapping from a (tokenA, tokenB) to a set of available bin steps, this is used to keep track of the bin steps that are already used for a pair. The tokens are ordered to save gas, but they can be in the reverse order in the actual pair. Always query one of the 2 tokens of the pair to assert the order of the 2 tokens"
				},
				"_lbPairsInfo": {
					"details": "Mapping from a (tokenA, tokenB, binStep) to a LBPair. The tokens are ordered to save gas, but they can be in the reverse order in the actual pair. Always query one of the 2 tokens of the pair to assert the order of the 2 tokens"
				}
			},
			"title": "Liquidity Book Factory",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addQuoteAsset(address)": {
					"notice": "Function to add an asset to the whitelist of quote assets"
				},
				"createLBPair(address,address,uint24,uint16)": {
					"notice": "Create a liquidity bin LBPair for tokenX and tokenY"
				},
				"forceDecay(address)": {
					"notice": "Function to force the decay of the volatility accumulator of a pair"
				},
				"getAllBinSteps()": {
					"notice": "View function to return the list of available binStep with a preset"
				},
				"getAllLBPairs(address,address)": {
					"notice": "View function to return all the LBPair of a pair of tokens"
				},
				"getFeeRecipient()": {
					"notice": "Get the protocol fee recipient"
				},
				"getFlashLoanFee()": {
					"notice": "Get the fee for flash loans, in 1e18"
				},
				"getLBPairAtIndex(uint256)": {
					"notice": "View function to return the LBPair created at index `index`"
				},
				"getLBPairBeacon()": {
					"notice": "Get the address of the LBPair beacon"
				},
				"getLBPairInformation(address,address,uint256)": {
					"notice": "Returns the LBPairInformation if it exists, if not, then the address 0 is returned. The order doesn't matter"
				},
				"getMaxFlashLoanFee()": {
					"notice": "Get the maximum fee percentage for flashLoans"
				},
				"getMinBinStep()": {
					"notice": "Get the minimum bin step a pair can have"
				},
				"getNumberOfLBPairs()": {
					"notice": "View function to return the number of LBPairs created"
				},
				"getNumberOfQuoteAssets()": {
					"notice": "View function to return the number of quote assets whitelisted"
				},
				"getOpenBinSteps()": {
					"notice": "View function to return the list of open binSteps"
				},
				"getPreset(uint256)": {
					"notice": "View function to return the different parameters of the preset Will revert if the preset doesn't exist"
				},
				"getQuoteAssetAtIndex(uint256)": {
					"notice": "View function to return the quote asset whitelisted at index `index`"
				},
				"hasRole(bytes32,address)": {
					"notice": "Returns whether the caller has the role or not, only the owner has the DEFAULT_ADMIN_ROLE"
				},
				"initialize(address,address,uint256,address)": {
					"notice": "Initializer function"
				},
				"isQuoteAsset(address)": {
					"notice": "View function to return whether a token is a quotedAsset (true) or not (false)"
				},
				"removeLBHooksOnPair(address,address,uint16)": {
					"notice": "Function to remove the hooks contract from the pair"
				},
				"removePreset(uint16)": {
					"notice": "Remove the preset linked to a binStep"
				},
				"removeQuoteAsset(address)": {
					"notice": "Function to remove an asset from the whitelist of quote assets"
				},
				"setFeeRecipient(address)": {
					"notice": "Function to set the recipient of the fees. This address needs to be able to receive ERC20s"
				},
				"setFeesParametersOnPair(address,address,uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24)": {
					"notice": "Function to set the fee parameter of a LBPair"
				},
				"setFlashLoanFee(uint256)": {
					"notice": "Function to set the flash loan fee"
				},
				"setLBHooksParametersOnPair(address,address,uint16,bytes32,bytes)": {
					"notice": "Function to set the hooks parameters of a pair"
				},
				"setLBPairIgnored(address,address,uint16,bool)": {
					"notice": "Function to set whether the pair is ignored or not for routing, it will make the pair unusable by the router"
				},
				"setPreset(uint16,uint16,uint16,uint16,uint16,uint24,uint16,uint24,bool)": {
					"notice": "Sets the preset parameters of a bin step"
				},
				"setPresetOpenState(uint16,bool)": {
					"notice": "Sets if the preset is open or not to be used by users"
				}
			},
			"notice": "Contract used to deploy and register new LBPairs. Enables setting fee parameters, flashloan fees and LBPair implementation. Unless the `isOpen` is `true`, only the owner of the factory can create pairs.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/LBFactory.sol": "LBFactory"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": [
			":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
			":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/",
			":src/=src/"
		]
	},
	"sources": {
		"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
			"keccak256": "0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225",
			"license": "MIT",
			"urls": [
				"bzz-raw://4d8544c6f8daa4d1bc215c6a72fe0acdb748664a105b0e5efc19295667521d45",
				"dweb:/ipfs/QmdGWqdnXT8S3RgCR6aV8XHZrsybieMQLLnug1NtpSjEXN"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol": {
			"keccak256": "0x72a2cb65884e565b059fdf43b1c8e074a2128d4456c467cabfcebd28f2f4c336",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ed917865e6ddc26ddefbd9376bb36a258e40dac98ed4836e54c8920c8982d22",
				"dweb:/ipfs/QmNonmf4PWnH2CzyTGmrgDkfzRz1uQaZdCQYQRaMpX3YNB"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
			"keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
				"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
			"keccak256": "0xddfe0afa85367153020524d383fe0bc9a1545f343019ddf33f98f392887047f0",
			"license": "MIT",
			"urls": [
				"bzz-raw://62f3df350ce83190e81673e424dd47d9ee8ffb121a6f72994c75c8ae3fc9dded",
				"dweb:/ipfs/QmaA2CMuqESmdgVao4XzCL4aRwcZW1xjUXpY7RqHZfQoAV"
			]
		},
		"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
			"keccak256": "0x65ca47513b279410048d29579aa4b32d8a7faf4ee8264f22ae4ac51117e733d9",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9a84d41cb877bf31c3db9a3dd917d5d94509834604722e7b972b112e4af705f",
				"dweb:/ipfs/QmYEZBWxWDkdbqqDTUmDpCD7txYMuS2ykcrCH3D5HAJ1J1"
			]
		},
		"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": {
			"keccak256": "0x06bd04b0d6af06424c58c24ad861ac4fbe68ae729c199127f4b64361a0629510",
			"license": "MIT",
			"urls": [
				"bzz-raw://8a9228dd927facb9a400333848e8cf616c7a7f30693563d98a963266dc8ae28a",
				"dweb:/ipfs/Qmehe5JAWCK7g8A9VkS9LpfiNkYzXkrxnXfpvtuqbrA9BA"
			]
		},
		"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
			"keccak256": "0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd",
			"license": "MIT",
			"urls": [
				"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac",
				"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e"
			]
		},
		"lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol": {
			"keccak256": "0x25052a8e6c783ab01f98a9ac7f521649be60b9963f352e2453997ba8fbc2d285",
			"license": "MIT",
			"urls": [
				"bzz-raw://94ba3d98053a310582febe79742e566a36073f1f2645ddc772c638c84ae93b88",
				"dweb:/ipfs/QmTHUMHniPNJ9H2Ui2zgk35CZDSThg2nQ8j5sNXaNarL9D"
			]
		},
		"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
			"keccak256": "0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa",
				"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM"
			]
		},
		"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
			"keccak256": "0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b",
			"license": "MIT",
			"urls": [
				"bzz-raw://b34bb828c45c3a4ebf6c2c585971abf5089e61357a3818a2900c7e85b74a1299",
				"dweb:/ipfs/QmewGAzKsPXYfSjCKxuH1SekKxtdyzhdbdyxjF5gohLigt"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
				"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
			"keccak256": "0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://22d71f40aa38a20cf466d8647452a6e3f746353474f8c8af40f03aa8cae38420",
				"dweb:/ipfs/QmQ752Hz5av7YDK8pFojzb5qgeXQvfsdkdwkHVzaXoYAZR"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
			"keccak256": "0x70d9a9cf8d5cc830d7396505ef8eb9686bd0c60a29c6644bd6cc278f9bab8ebe",
			"license": "MIT",
			"urls": [
				"bzz-raw://719abb402c11be12355088da587ffd971fee1b035b5aa6b1ba3b1a9493d3c1d7",
				"dweb:/ipfs/QmanHMFVDqVtZAFFaH1CeGQWoHWsFnWHH75fCrguwi77Hq"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
				"dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol": {
			"keccak256": "0xd54305a00b75f1d580747bc916257a6a53d5c0c699d65f947988ef9c1d95a2b5",
			"license": "MIT",
			"urls": [
				"bzz-raw://e687cd2e6ce64ed9829557eef8b542dd5ef3829ecd1b00a07ff5bfd7dc0c59c4",
				"dweb:/ipfs/QmaX3mE3HbH5cUbyj9RszWEXsjjMJ6LtuovebEYhxjUMvw"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
				"dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
			]
		},
		"src/LBFactory.sol": {
			"keccak256": "0x4357528177127b0aa5dae3bda1bd8a085954c39be364d28763e8240c5778e33f",
			"license": "MIT",
			"urls": [
				"bzz-raw://01f6b53f5ae61f431780acc158fea89a77c6de5f6c43d0a389307bd22a8e9dbe",
				"dweb:/ipfs/QmZ723Q6wkD9SbwsEz8okjAf8UHbv5xngw8DHvV2BVmSMG"
			]
		},
		"src/LBPairBeaconProxy.sol": {
			"keccak256": "0x9ef05f6a2b5f9ad4deffb5635999f953d03bdeeca73682a84896c45a44060e7e",
			"license": "GPL-3",
			"urls": [
				"bzz-raw://2845d3a65804c8b3f84317b9aef108e46a9e55a7c84295523e0c027e80e24a75",
				"dweb:/ipfs/Qmb3PjAJWVWi1RCz7dy8RjPyAnDRJBU6nnVtxuPo6Pu7Vf"
			]
		},
		"src/LBPairUnstructuredStorage.sol": {
			"keccak256": "0x0624f033c86f4ba1f900d99163241f879157509e1e93af85fc3418ec87463dcd",
			"license": "GPL-3",
			"urls": [
				"bzz-raw://aa622c89b893cc8fea94879e9a7a9d71d265df923f3b884426e2c830cdc8ddca",
				"dweb:/ipfs/QmVM8gFUGnnBSfLJF3mtGYKDChMC5Mt5Q3d6RsEPJ7LpLd"
			]
		},
		"src/interfaces/ILBFactory.sol": {
			"keccak256": "0xddcd3890949ab5bb4731a14e4a9c77ec5f08afb45489cf66114579f605fb1f53",
			"license": "MIT",
			"urls": [
				"bzz-raw://26a2573f58163514a154a55c62d55cfa05c66fe4169c56b0d94c660a5561f61e",
				"dweb:/ipfs/QmPTiFGfzFBT8jgsXSYpADkjwcgqRPUsewXvZiMzJ1PgrK"
			]
		},
		"src/interfaces/ILBFlashLoanCallback.sol": {
			"keccak256": "0xd6241939a66626bbfa60eac46b5fc566f55ff302c7b6eb124d453be0e1a3117b",
			"license": "MIT",
			"urls": [
				"bzz-raw://a6a8d3894f2e0820b6bcd973d7de2450fa310440572a5d83ff55ef0d5b70d90a",
				"dweb:/ipfs/QmXeJXvy2sSW77y1Wotp9HLe9chgs6XM62toq9EyEGVXtt"
			]
		},
		"src/interfaces/ILBHooks.sol": {
			"keccak256": "0xad32a000f052e48266932bc3eb9818de0a80b77235ae5d44d9a5286264992f1a",
			"license": "MIT",
			"urls": [
				"bzz-raw://044044be7373a509f946ede2ee05580f55438ce317e3c538a888208f18f39109",
				"dweb:/ipfs/QmWK93hkd91t7LQRnVN1QZXUniCLh5HifXrww5BhRxaD9n"
			]
		},
		"src/interfaces/ILBPair.sol": {
			"keccak256": "0xf020988a240ecda054cadf92745ef85dadcf1df00a86cef5eb2b5e175f3e401d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5df1a78f215bc8c00032aa9d52f07ea396495e2a20a69041552001cf72c939d",
				"dweb:/ipfs/Qma6t4CfwRftoAUvsLLVpk9HZ2FwNjCisfHZGnnw7aR8dW"
			]
		},
		"src/interfaces/ILBToken.sol": {
			"keccak256": "0xe7b35ed8bfc934c205870fbff04dcdcfb7b86947ab55053d5b5d1deebf2a22d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://7f9d85fc124b31d5a76279e31190d23d48cdd715e5eea97c99ae64feed3301e6",
				"dweb:/ipfs/QmQdrU2VcSQLTG9yCtJK7AexWCEmUX46Ko4eEBzeZV5jKg"
			]
		},
		"src/libraries/Constants.sol": {
			"keccak256": "0xbaec78116502fa592e778f692d21ff4365b92e3e1fe32ffb44442a50d2273401",
			"license": "MIT",
			"urls": [
				"bzz-raw://b932c47fedd8a4ff390e928319882c5682d6e5b718202b84db924cf1de059c65",
				"dweb:/ipfs/QmetbTc4Z5UtXP9Cx7m3K1788LqQCSbYHXkPzgDnCfFCZZ"
			]
		},
		"src/libraries/Hooks.sol": {
			"keccak256": "0xa68b3308bf297c2cd03f2e4f28a6a5e0e68c415d617672bf356aadff56c53959",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9a6b20fd8aeefacb64dbf3b463b0c10cb8848fd61f4f3344ed53731ffaf686a",
				"dweb:/ipfs/QmRvcBNazvsKvfDXQtdQj3GczaNLbFcqVYdcJCoRA6MDop"
			]
		},
		"src/libraries/ImmutableClone.sol": {
			"keccak256": "0xb11421c05ec91ca74a2ce9c9108fb6a13be96177a072383c8e02490be28590bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://3589fceccbeb601e4a2565797acad2ffcc6000ea682ce158d367c541d3d6054a",
				"dweb:/ipfs/QmNz2CLyArtuxTE652mtVfVKysZ8hY99RdssPUjKhVx7ZL"
			]
		},
		"src/libraries/PairParameterHelper.sol": {
			"keccak256": "0xd75796a09915a4ce7fd69894504bb21d8f4b6b8fd96b9d863422911313f9dd71",
			"license": "MIT",
			"urls": [
				"bzz-raw://c38fa6ee12c97e1aa1b33ae4cca16f52c1712b7b7a2222dc0cdf61f087ab6e1b",
				"dweb:/ipfs/QmUXVXUhAtZufsRKKEujphnQLhEmiADw215LMcpjooiERr"
			]
		},
		"src/libraries/PriceHelper.sol": {
			"keccak256": "0xe8af4af39a9063fa569aa161f0fb0b81825131c102b8504deebe142f79f918a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1b6e1bcd23acaf79754aed4eb8f32ca3f1712696396a6f06511a6422f73da01f",
				"dweb:/ipfs/QmNZjn3byK4aDYMC5xYPKWCjVUoSmUQgeaHx14q9iA412N"
			]
		},
		"src/libraries/StringUtils.sol": {
			"keccak256": "0x9734a4e165526a7590c5303bc983a552eadd5a6e20143a4ea731bca9413320d4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://1239d261c4e0e136106e30dae7766c3fb6f8ee5867db31c265740236f3ada40f",
				"dweb:/ipfs/QmfYnsyuxNZrK8gp4JbDqjfdoEDhFqsQRkK54Ht68jUDqE"
			]
		},
		"src/libraries/math/BitMath.sol": {
			"keccak256": "0x91d6b780c0e692375fc3f28fa7dc91945d99631d6d11129019f220ce5cf72546",
			"license": "MIT",
			"urls": [
				"bzz-raw://3df6c6db95373eff76c8a19686dfdc54cd1648c4aae8213b4e444ddb75e62c7d",
				"dweb:/ipfs/QmQTk9n5Y1jnXm92JY1AzrZ1aRgcJMScfenG1othxwEFp5"
			]
		},
		"src/libraries/math/Encoded.sol": {
			"keccak256": "0x80f30c25043cad96df1f36cf8df7aa2bff2f6ea06446a8c2ca7f39cbb7c20dee",
			"license": "MIT",
			"urls": [
				"bzz-raw://275111862e401672d91d2eb582e078595947ef1d09cd6ef913770fd1f47c49a1",
				"dweb:/ipfs/QmbbFVyZviadw1S3ZDHeiqFtxQfuEi6f27sxUX6Y87hrew"
			]
		},
		"src/libraries/math/SafeCast.sol": {
			"keccak256": "0xb766fabcdae5b3f112529aee2b960676bb3e856c1cf7acbcea5912e0bd602257",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9e10644ad1dedd8c479e0a43f805487324325e6c0fc4563cb3e31973cb1962e",
				"dweb:/ipfs/QmaDRad21DDwHJFq1i7QV5xM7KVRJCHFzkJfw6CEk8VYCD"
			]
		},
		"src/libraries/math/Uint128x128Math.sol": {
			"keccak256": "0xa7cf73467bb5e81673936e1f8858f3e1527b201dd80b60c05cb12d8b6299d59a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0d82b3b566be3a0c9374cb34ef19e62876ea020c03f8138bb6a57f4c8a999a94",
				"dweb:/ipfs/QmQwxpssza3hxtRwf1HQEwH1j7Vx5AELvELLTbbbz52KnU"
			]
		},
		"src/libraries/math/Uint256x256Math.sol": {
			"keccak256": "0x53673c6ee8410fa57e2be64120ee214648506d14467260d5f81cacbcd2a3c51f",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9c44d1bdc36e290edf212767c11d0e374804819f26fbdb8af2cfc78e3271cea",
				"dweb:/ipfs/QmPkmBujndep8jp2wcS63CiSCwYR2nXiGU7hQmz1UpFJ3M"
			]
		}
	},
	"version": 1
}