{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract ILBFactory",
						"name": "factory2",
						"type": "address"
					},
					{
						"internalType": "contract ISovrynLBFactoryV1",
						"name": "factoryV1",
						"type": "address"
					},
					{
						"internalType": "contract IWNATIVE",
						"name": "wnative",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountSlippage",
						"type": "uint256"
					}
				],
				"name": "LBRouter__AmountSlippageBPTooBig",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountXMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"name": "LBRouter__AmountSlippageCaught",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "LBRouter__BinReserveOverflows",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBRouter__BrokenSwapSafetyCheck",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentTimestamp",
						"type": "uint256"
					}
				],
				"name": "LBRouter__DeadlineExceeded",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LBRouter__FailedToSendNATIVE",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "idDesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "idSlippage",
						"type": "uint256"
					}
				],
				"name": "LBRouter__IdDesiredOverflows",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "id",
						"type": "int256"
					}
				],
				"name": "LBRouter__IdOverflows",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "activeIdDesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "idSlippage",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "activeId",
						"type": "uint256"
					}
				],
				"name": "LBRouter__IdSlippageCaught",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"name": "LBRouter__InsufficientAmountOut",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "wrongToken",
						"type": "address"
					}
				],
				"name": "LBRouter__InvalidTokenPath",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "version",
						"type": "uint256"
					}
				],
				"name": "LBRouter__InvalidVersion",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBRouter__LengthsMismatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountInMax",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"name": "LBRouter__MaxAmountInExceeded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBRouter__NotFactoryOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "binStep",
						"type": "uint256"
					}
				],
				"name": "LBRouter__PairNotCreated",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBRouter__SenderIsNotWNATIVE",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "LBRouter__SwapOverflows",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "excess",
						"type": "uint256"
					}
				],
				"name": "LBRouter__TooMuchTokensIn",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserve",
						"type": "uint256"
					}
				],
				"name": "LBRouter__WrongAmounts",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "msgValue",
						"type": "uint256"
					}
				],
				"name": "LBRouter__WrongNativeLiquidityParameters",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LBRouter__WrongTokenOrder",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PackedUint128Math__SubUnderflow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SovrynLBLibrary__InsufficientAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SovrynLBLibrary__InsufficientLiquidity",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TokenHelper__TransferFailed",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IERC20",
								"name": "tokenX",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenY",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "binStep",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountX",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountY",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountXMin",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountYMin",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "activeIdDesired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "idSlippage",
								"type": "uint256"
							},
							{
								"internalType": "int256[]",
								"name": "deltaIds",
								"type": "int256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "distributionX",
								"type": "uint256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "distributionY",
								"type": "uint256[]"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "refundTo",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ILBRouter.LiquidityParameters",
						"name": "liquidityParameters",
						"type": "tuple"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountXAdded",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYAdded",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountXLeft",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYLeft",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "depositIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "liquidityMinted",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IERC20",
								"name": "tokenX",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenY",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "binStep",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountX",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountY",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountXMin",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amountYMin",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "activeIdDesired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "idSlippage",
								"type": "uint256"
							},
							{
								"internalType": "int256[]",
								"name": "deltaIds",
								"type": "int256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "distributionX",
								"type": "uint256[]"
							},
							{
								"internalType": "uint256[]",
								"name": "distributionY",
								"type": "uint256[]"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "refundTo",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ILBRouter.LiquidityParameters",
						"name": "liquidityParameters",
						"type": "tuple"
					}
				],
				"name": "addLiquidityNATIVE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountXAdded",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYAdded",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountXLeft",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYLeft",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "depositIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "liquidityMinted",
						"type": "uint256[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "activeId",
						"type": "uint24"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					}
				],
				"name": "createLBPair",
				"outputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getFactory",
				"outputs": [
					{
						"internalType": "contract ILBFactory",
						"name": "lbFactory",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "getIdFromPrice",
				"outputs": [
					{
						"internalType": "uint24",
						"name": "",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "id",
						"type": "uint24"
					}
				],
				"name": "getPriceFromId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "uint128",
						"name": "amountOut",
						"type": "uint128"
					},
					{
						"internalType": "bool",
						"name": "swapForY",
						"type": "bool"
					}
				],
				"name": "getSwapIn",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "amountIn",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "amountOutLeft",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "fee",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILBPair",
						"name": "pair",
						"type": "address"
					},
					{
						"internalType": "uint128",
						"name": "amountIn",
						"type": "uint128"
					},
					{
						"internalType": "bool",
						"name": "swapForY",
						"type": "bool"
					}
				],
				"name": "getSwapOut",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "amountInLeft",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "amountOut",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "fee",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getV1Factory",
				"outputs": [
					{
						"internalType": "contract ISovrynLBFactoryV1",
						"name": "factoryV1",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWNATIVE",
				"outputs": [
					{
						"internalType": "contract IWNATIVE",
						"name": "wnative",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "tokenX",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "tokenY",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "amountXMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountYMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountX",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountY",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "binStep",
						"type": "uint16"
					},
					{
						"internalType": "uint256",
						"name": "amountTokenMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountNATIVEMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "address payable",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "removeLiquidityNATIVE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountToken",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountNATIVE",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactNATIVEForTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMinNATIVE",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address payable",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForNATIVE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMinNATIVE",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address payable",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapNATIVEForExactTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountNATIVEOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountInMax",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address payable",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapTokensForExactNATIVE",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountInMax",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256[]",
								"name": "pairBinSteps",
								"type": "uint256[]"
							},
							{
								"internalType": "enum ILBRouter.Version[]",
								"name": "versions",
								"type": "uint8[]"
							},
							{
								"internalType": "contract IERC20[]",
								"name": "tokenPath",
								"type": "address[]"
							}
						],
						"internalType": "struct ILBRouter.Path",
						"name": "path",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapTokensForExactTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "sweep",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILBToken",
						"name": "lbToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "ids",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"name": "sweepLBToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				}
			},
			"kind": "dev",
			"methods": {
				"addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
					"details": "This function is compliant with fee on transfer tokens",
					"params": {
						"liquidityParameters": "The liquidity parameters"
					},
					"returns": {
						"amountXAdded": "The amount of token X added",
						"amountXLeft": "The amount of token X left (sent back to liquidityParameters.refundTo)",
						"amountYAdded": "The amount of token Y added",
						"amountYLeft": "The amount of token Y left (sent back to liquidityParameters.refundTo)",
						"depositIds": "The ids of the deposits",
						"liquidityMinted": "The amount of liquidity minted"
					}
				},
				"addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
					"details": "This function is compliant with fee on transfer tokens",
					"params": {
						"liquidityParameters": "The liquidity parameters"
					},
					"returns": {
						"amountXAdded": "The amount of token X added",
						"amountXLeft": "The amount of token X left (sent back to liquidityParameters.refundTo)",
						"amountYAdded": "The amount of token Y added",
						"amountYLeft": "The amount of token Y left (sent back to liquidityParameters.refundTo)",
						"depositIds": "The ids of the deposits",
						"liquidityMinted": "The amount of liquidity minted"
					}
				},
				"constructor": {
					"custom:oz-upgrades-unsafe-allow": "constructor"
				},
				"createLBPair(address,address,uint24,uint16)": {
					"params": {
						"activeId": "The active id of the pair",
						"binStep": "The bin step in basis point, used to calculate log(1 + binStep)",
						"tokenX": "The address of the first token",
						"tokenY": "The address of the second token"
					},
					"returns": {
						"pair": "The address of the newly created LBPair"
					}
				},
				"getFactory()": {
					"returns": {
						"lbFactory": "The address of the factory V2.1"
					}
				},
				"getIdFromPrice(address,uint256)": {
					"params": {
						"pair": "The address of the LBPair",
						"price": "The price of y per x (multiplied by 1e36)"
					},
					"returns": {
						"_0": "The id corresponding to this price"
					}
				},
				"getPriceFromId(address,uint24)": {
					"params": {
						"id": "The id",
						"pair": "The address of the LBPair"
					},
					"returns": {
						"_0": "The price corresponding to this id"
					}
				},
				"getSwapIn(address,uint128,bool)": {
					"params": {
						"amountOut": "The amount of token to receive",
						"pair": "The address of the LBPair",
						"swapForY": "Whether you swap X for Y (true), or Y for X (false)"
					},
					"returns": {
						"amountIn": "The amount of token to send in order to receive amountOut token",
						"amountOutLeft": "The amount of token Out that can't be returned due to a lack of liquidity",
						"fee": "The amount of fees paid in token sent"
					}
				},
				"getSwapOut(address,uint128,bool)": {
					"params": {
						"amountIn": "The amount of token sent",
						"pair": "The address of the LBPair",
						"swapForY": "Whether you swap X for Y (true), or Y for X (false)"
					},
					"returns": {
						"amountInLeft": "The amount of token In that can't be swapped due to a lack of liquidity",
						"amountOut": "The amount of token received if amountIn tokenX are sent",
						"fee": "The amount of fees paid in token sent"
					}
				},
				"getV1Factory()": {
					"returns": {
						"factoryV1": "The address of the factory V1"
					}
				},
				"getWNATIVE()": {
					"returns": {
						"wnative": "The address of WNATIVE"
					}
				},
				"removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
					"details": "This function is compliant with fee on transfer tokens",
					"params": {
						"amountXMin": "The min amount to receive of token X",
						"amountYMin": "The min amount to receive of token Y",
						"amounts": "The list of amounts to burn of each id in `_ids`",
						"binStep": "The bin step of the LBPair",
						"deadline": "The deadline of the tx",
						"ids": "The list of ids to burn",
						"to": "The address of the recipient",
						"tokenX": "The address of token X",
						"tokenY": "The address of token Y"
					},
					"returns": {
						"amountX": "Amount of token X returned",
						"amountY": "Amount of token Y returned"
					}
				},
				"removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
					"details": "This function is **NOT** compliant with fee on transfer tokens. This is wanted as it would make users pays the fee on transfer twice, use the `removeLiquidity` function to remove liquidity with fee on transfer tokens.",
					"params": {
						"amountNATIVEMin": "The min amount to receive of NATIVE",
						"amountTokenMin": "The min amount to receive of token",
						"amounts": "The list of amounts to burn of each id in `_ids`",
						"binStep": "The bin step of the LBPair",
						"deadline": "The deadline of the tx",
						"ids": "The list of ids to burn",
						"to": "The address of the recipient",
						"token": "The address of token"
					},
					"returns": {
						"amountNATIVE": "Amount of NATIVE returned",
						"amountToken": "Amount of token returned"
					}
				},
				"swapExactNATIVEForTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountOutMin": "The min amount of token to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountOut": "Output amount of the swap"
					}
				},
				"swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountOutMin": "The min amount of token to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountOut": "Output amount of the swap"
					}
				},
				"swapExactTokensForNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountIn": "The amount of token to send",
						"amountOutMinNATIVE": "The min amount of NATIVE to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountOut": "Output amount of the swap"
					}
				},
				"swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountIn": "The amount of token to send",
						"amountOutMinNATIVE": "The min amount of NATIVE to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountOut": "Output amount of the swap"
					}
				},
				"swapExactTokensForTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountIn": "The amount of token to send",
						"amountOutMin": "The min amount of token to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountOut": "Output amount of the swap"
					}
				},
				"swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountIn": "The amount of token to send",
						"amountOutMin": "The min amount of token to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountOut": "Output amount of the swap"
					}
				},
				"swapNATIVEForExactTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"details": "Will refund any NATIVE amount sent in excess to `msg.sender`",
					"params": {
						"amountOut": "The amount of tokens to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountsIn": "path amounts for every step of the swap"
					}
				},
				"swapTokensForExactNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountInMax": "The max amount of token to send",
						"amountNATIVEOut": "The amount of NATIVE to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountsIn": "path amounts for every step of the swap"
					}
				},
				"swapTokensForExactTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"params": {
						"amountInMax": "The max amount of token to send",
						"amountOut": "The amount of token to receive",
						"deadline": "The deadline of the tx",
						"path": "The path of the swap",
						"to": "The address of the recipient"
					},
					"returns": {
						"amountsIn": "Input amounts of the swap"
					}
				},
				"sweep(address,address,uint256)": {
					"details": "Only callable by the factory owner",
					"params": {
						"amount": "The amount to send",
						"to": "The address of the user to send back the tokens",
						"token": "The address of the token"
					}
				},
				"sweepLBToken(address,address,uint256[],uint256[])": {
					"details": "Only callable by the factory owner",
					"params": {
						"amounts": "The list of amounts to send",
						"ids": "The list of token ids",
						"lbToken": "The address of the LBToken",
						"to": "The address of the user to send back the tokens"
					}
				}
			},
			"stateVariables": {
				"_factory2": {
					"custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
				},
				"_factoryV1": {
					"custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
				},
				"_wnative": {
					"custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
				}
			},
			"title": "Liquidity Book Router",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addLiquidity((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
					"notice": "Add liquidity while performing safety checks"
				},
				"addLiquidityNATIVE((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256[],uint256[],uint256[],address,address,uint256))": {
					"notice": "Add liquidity with NATIVE while performing safety checks"
				},
				"createLBPair(address,address,uint24,uint16)": {
					"notice": "Create a liquidity bin LBPair for tokenX and tokenY using the factory"
				},
				"getFactory()": {
					"notice": "View function to get the factory V2.1 address"
				},
				"getIdFromPrice(address,uint256)": {
					"notice": "Returns the approximate id corresponding to the inputted price. Warning, the returned id may be inaccurate close to the start price of a bin"
				},
				"getPriceFromId(address,uint24)": {
					"notice": "Returns the price corresponding to the inputted id"
				},
				"getSwapIn(address,uint128,bool)": {
					"notice": "Simulate a swap in"
				},
				"getSwapOut(address,uint128,bool)": {
					"notice": "Simulate a swap out"
				},
				"getV1Factory()": {
					"notice": "View function to get the factory V1 address"
				},
				"getWNATIVE()": {
					"notice": "View function to get the WNATIVE address"
				},
				"removeLiquidity(address,address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
					"notice": "Remove liquidity while performing safety checks"
				},
				"removeLiquidityNATIVE(address,uint16,uint256,uint256,uint256[],uint256[],address,uint256)": {
					"notice": "Remove NATIVE liquidity while performing safety checks"
				},
				"swapExactNATIVEForTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps exact NATIVE for tokens while performing safety checks"
				},
				"swapExactNATIVEForTokensSupportingFeeOnTransferTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps exact NATIVE for tokens while performing safety checks supporting for fee on transfer tokens"
				},
				"swapExactTokensForNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps exact tokens for NATIVE while performing safety checks"
				},
				"swapExactTokensForNATIVESupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps exact tokens for NATIVE while performing safety checks supporting for fee on transfer tokens"
				},
				"swapExactTokensForTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps exact tokens for tokens while performing safety checks"
				},
				"swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps exact tokens for tokens while performing safety checks supporting for fee on transfer tokens"
				},
				"swapNATIVEForExactTokens(uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps NATIVE for exact tokens while performing safety checks"
				},
				"swapTokensForExactNATIVE(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps tokens for exact NATIVE while performing safety checks"
				},
				"swapTokensForExactTokens(uint256,uint256,(uint256[],uint8[],address[]),address,uint256)": {
					"notice": "Swaps tokens for exact tokens while performing safety checks"
				},
				"sweep(address,address,uint256)": {
					"notice": "Unstuck tokens that are sent to this contract by mistake"
				},
				"sweepLBToken(address,address,uint256[],uint256[])": {
					"notice": "Unstuck LBTokens that are sent to this contract by mistake"
				}
			},
			"notice": "Main contract to interact with to swap and manage liquidity on Sovryn LB V2 exchange.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/LBRouter.sol": "LBRouter"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": [
			":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
			":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/",
			":src/=src/"
		]
	},
	"sources": {
		"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
			"keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
				"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009",
				"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xc859863e3bda7ec3cddf6dafe2ffe91bcbe648d1395b856b839c32ee9617c44c",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9d5417888b873cf2225ed5d50b2a67be97c1504134a2a580512168d587ad82e",
				"dweb:/ipfs/QmNr5fTb2heFW658NZn7dDnofZgFvQTnNxKRJ3wdnR1skX"
			]
		},
		"src/LBRouter.sol": {
			"keccak256": "0x065f078d353ace56082b3f57b478a2d2a4bbb05a6dd183c48cd70b96263c51c2",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9c5ebcc9f2630697f9cd34b81a3e9845dc4accef0ac1dba4704994dedad5da0",
				"dweb:/ipfs/Qmd19LLUTWixw6TqY66nG1jwnG6mnZrcRN9nM6NN1wEzYE"
			]
		},
		"src/interfaces/ILBFactory.sol": {
			"keccak256": "0xddcd3890949ab5bb4731a14e4a9c77ec5f08afb45489cf66114579f605fb1f53",
			"license": "MIT",
			"urls": [
				"bzz-raw://26a2573f58163514a154a55c62d55cfa05c66fe4169c56b0d94c660a5561f61e",
				"dweb:/ipfs/QmPTiFGfzFBT8jgsXSYpADkjwcgqRPUsewXvZiMzJ1PgrK"
			]
		},
		"src/interfaces/ILBFlashLoanCallback.sol": {
			"keccak256": "0xd6241939a66626bbfa60eac46b5fc566f55ff302c7b6eb124d453be0e1a3117b",
			"license": "MIT",
			"urls": [
				"bzz-raw://a6a8d3894f2e0820b6bcd973d7de2450fa310440572a5d83ff55ef0d5b70d90a",
				"dweb:/ipfs/QmXeJXvy2sSW77y1Wotp9HLe9chgs6XM62toq9EyEGVXtt"
			]
		},
		"src/interfaces/ILBHooks.sol": {
			"keccak256": "0xad32a000f052e48266932bc3eb9818de0a80b77235ae5d44d9a5286264992f1a",
			"license": "MIT",
			"urls": [
				"bzz-raw://044044be7373a509f946ede2ee05580f55438ce317e3c538a888208f18f39109",
				"dweb:/ipfs/QmWK93hkd91t7LQRnVN1QZXUniCLh5HifXrww5BhRxaD9n"
			]
		},
		"src/interfaces/ILBLegacyFactory.sol": {
			"keccak256": "0xcec90d4f620b1ff5b3c6b57348044e8e9c0e1313c20fa2f5c91206c84e47a388",
			"license": "MIT",
			"urls": [
				"bzz-raw://6cd83dd005f0fd8229fd6eb9d2cd37399b543ab9d9ccefe9050c472dcb106490",
				"dweb:/ipfs/Qmca42wgwAUCWRX3ZMezhnJGwSHcXpP7D4hDYRZmeJChgY"
			]
		},
		"src/interfaces/ILBLegacyPair.sol": {
			"keccak256": "0x4d26410d0c866e3ed50c39ffeb191d2beefcbb603a39812b3497de267035bac4",
			"license": "MIT",
			"urls": [
				"bzz-raw://a307fdcace490a0b52e4db19befde1267615602140858d4b806b885258dec262",
				"dweb:/ipfs/QmYPEdQJRAFwdyrphHZT2vpqdFo7gK3SULn3QYA3kdx3Ka"
			]
		},
		"src/interfaces/ILBLegacyRouter.sol": {
			"keccak256": "0xdeee599df829ad6c0ee8174c48def9858ac4a9b420cd0f3ca4541f3fb6cdf82e",
			"license": "MIT",
			"urls": [
				"bzz-raw://2688d777fec9ad1e91bd74cd323897de85a1776e16c9441474d63c1b08c3b8c0",
				"dweb:/ipfs/QmZfB4VBegmr7vD4RXUBXEXtynny2JrwF69gh2uks5UxAD"
			]
		},
		"src/interfaces/ILBLegacyToken.sol": {
			"keccak256": "0x8761bc1f131de7fc47ab2e83df8e42dea8472976e5b6cd85e6e6b4c97a5b1c1f",
			"license": "MIT",
			"urls": [
				"bzz-raw://069c01d23f87b602eac49dc7c6cdfc1b3d505cffc4b42dfc3284b382853a0c3f",
				"dweb:/ipfs/QmQnu2Uff3wzJ3ZnLwZrKB8ECnoF3SzPHLBHQcMhcWpFHT"
			]
		},
		"src/interfaces/ILBPair.sol": {
			"keccak256": "0xf020988a240ecda054cadf92745ef85dadcf1df00a86cef5eb2b5e175f3e401d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5df1a78f215bc8c00032aa9d52f07ea396495e2a20a69041552001cf72c939d",
				"dweb:/ipfs/Qma6t4CfwRftoAUvsLLVpk9HZ2FwNjCisfHZGnnw7aR8dW"
			]
		},
		"src/interfaces/ILBRouter.sol": {
			"keccak256": "0xe71da86c5fb90e7cff71d874bb7d3d805df175afd8c876f000c80ce329be31da",
			"license": "MIT",
			"urls": [
				"bzz-raw://1282a496ed9eee833f91def600027739966f41313722fe92f1d9b573f4e6e6b3",
				"dweb:/ipfs/QmXJRCjTd5DRd5VEuTpN1ZKkxP4TcRFuPSL5ZdQb5GnV1G"
			]
		},
		"src/interfaces/ILBToken.sol": {
			"keccak256": "0xe7b35ed8bfc934c205870fbff04dcdcfb7b86947ab55053d5b5d1deebf2a22d7",
			"license": "MIT",
			"urls": [
				"bzz-raw://7f9d85fc124b31d5a76279e31190d23d48cdd715e5eea97c99ae64feed3301e6",
				"dweb:/ipfs/QmQdrU2VcSQLTG9yCtJK7AexWCEmUX46Ko4eEBzeZV5jKg"
			]
		},
		"src/interfaces/ISovrynLBFactoryV1.sol": {
			"keccak256": "0x7cc6e501d10d5982b0bc18c4f6396e1d53606cc4161d0c01aec6480a7fefbcce",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://dd48d3a9c381f3b9a7197dfdffac3521c10241f751101f3ee86fae1b1dc676d9",
				"dweb:/ipfs/Qma4kuNgRAm1v6LxSUFo384k5yvXnZ4wdE5cGU4GijyTSd"
			]
		},
		"src/interfaces/ISovrynLBPairV1.sol": {
			"keccak256": "0x71be4746f20a76c33bffe7a18b0b23bb17f2a89035b8b9be0a58c8e3c973a855",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://be2ea1f8fcb9812951eaa5f8278ad15ea3e90105f5159e0e9ca2ed22e566dec0",
				"dweb:/ipfs/QmTpNEmrxLEd1c9VAtXgwNt6xaWxtyVWrW4LyqrThKDMmc"
			]
		},
		"src/interfaces/IWNATIVE.sol": {
			"keccak256": "0x60ffbeb68bc35b80c5a8046854ac095c73cdffbe0f293091f69f0adaf31543e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://8c9d73dffc2c51210a0591c11483e2d8cdfdfc95dbc2d561f6b27b3b918d47aa",
				"dweb:/ipfs/QmZPd81xzm6HaLvu9i1pK7wu8agvRyQFrTyugybtLCYB74"
			]
		},
		"src/libraries/BinHelper.sol": {
			"keccak256": "0x628f601bafe7f4f26703fa2d2af1b354504afb334120c1c230ce59cf835fe9b1",
			"license": "MIT",
			"urls": [
				"bzz-raw://1849fb70a3d6792e3600a1edc62cf78e4bfe4cdb58fc66f77ad1698677ae8e12",
				"dweb:/ipfs/QmXmfTTf7RWACPNPg6NnptKntkpggNZhkPJgBf4v34Zpnu"
			]
		},
		"src/libraries/Constants.sol": {
			"keccak256": "0xbaec78116502fa592e778f692d21ff4365b92e3e1fe32ffb44442a50d2273401",
			"license": "MIT",
			"urls": [
				"bzz-raw://b932c47fedd8a4ff390e928319882c5682d6e5b718202b84db924cf1de059c65",
				"dweb:/ipfs/QmetbTc4Z5UtXP9Cx7m3K1788LqQCSbYHXkPzgDnCfFCZZ"
			]
		},
		"src/libraries/FeeHelper.sol": {
			"keccak256": "0x1006878aa066fb9f68bcc4a56029454acfb919abaa3fb84c7e956f61c6435365",
			"license": "MIT",
			"urls": [
				"bzz-raw://bdcd8045a060f75493de19cd4c731bd6a7d27bb3554be4cf235d1e2705094d6a",
				"dweb:/ipfs/QmfB2CdBhid2ixRgsFPF4w3JfFkieL2DuJLX6zjn11EH2x"
			]
		},
		"src/libraries/Hooks.sol": {
			"keccak256": "0xa68b3308bf297c2cd03f2e4f28a6a5e0e68c415d617672bf356aadff56c53959",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9a6b20fd8aeefacb64dbf3b463b0c10cb8848fd61f4f3344ed53731ffaf686a",
				"dweb:/ipfs/QmRvcBNazvsKvfDXQtdQj3GczaNLbFcqVYdcJCoRA6MDop"
			]
		},
		"src/libraries/PairParameterHelper.sol": {
			"keccak256": "0xd75796a09915a4ce7fd69894504bb21d8f4b6b8fd96b9d863422911313f9dd71",
			"license": "MIT",
			"urls": [
				"bzz-raw://c38fa6ee12c97e1aa1b33ae4cca16f52c1712b7b7a2222dc0cdf61f087ab6e1b",
				"dweb:/ipfs/QmUXVXUhAtZufsRKKEujphnQLhEmiADw215LMcpjooiERr"
			]
		},
		"src/libraries/PriceHelper.sol": {
			"keccak256": "0xe8af4af39a9063fa569aa161f0fb0b81825131c102b8504deebe142f79f918a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1b6e1bcd23acaf79754aed4eb8f32ca3f1712696396a6f06511a6422f73da01f",
				"dweb:/ipfs/QmNZjn3byK4aDYMC5xYPKWCjVUoSmUQgeaHx14q9iA412N"
			]
		},
		"src/libraries/SovrynLBLibrary.sol": {
			"keccak256": "0x514625c1f1c443cd266e4649c4477f6e7fb97933abd23bd5730a2702e70d3db0",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://5cbde0beee3ca3cc8f0a101709cf10b91a5433a385c625a44368bdda228730ea",
				"dweb:/ipfs/QmSwpUSDzaZbP8DDSWeuYUr3c2YKQLBor2kgofdEREmjMZ"
			]
		},
		"src/libraries/TokenHelper.sol": {
			"keccak256": "0xe8ae81331a34b92fd7f9d35c5db42155b7a15e030be71461e8fde43b61f94f89",
			"license": "MIT",
			"urls": [
				"bzz-raw://ff0d559ce9e5a078b45fc50450031a50aafa28ef9040819ee9389a4ca525646a",
				"dweb:/ipfs/QmXND5xw7qv1thPqTwtLgc6GzTNzo51G8LN1iaqbDnZADZ"
			]
		},
		"src/libraries/math/BitMath.sol": {
			"keccak256": "0x91d6b780c0e692375fc3f28fa7dc91945d99631d6d11129019f220ce5cf72546",
			"license": "MIT",
			"urls": [
				"bzz-raw://3df6c6db95373eff76c8a19686dfdc54cd1648c4aae8213b4e444ddb75e62c7d",
				"dweb:/ipfs/QmQTk9n5Y1jnXm92JY1AzrZ1aRgcJMScfenG1othxwEFp5"
			]
		},
		"src/libraries/math/Encoded.sol": {
			"keccak256": "0x80f30c25043cad96df1f36cf8df7aa2bff2f6ea06446a8c2ca7f39cbb7c20dee",
			"license": "MIT",
			"urls": [
				"bzz-raw://275111862e401672d91d2eb582e078595947ef1d09cd6ef913770fd1f47c49a1",
				"dweb:/ipfs/QmbbFVyZviadw1S3ZDHeiqFtxQfuEi6f27sxUX6Y87hrew"
			]
		},
		"src/libraries/math/LiquidityConfigurations.sol": {
			"keccak256": "0x2afb2f102951960df3d03c44fabbc203639df1cf964803c1385e27947abf928f",
			"license": "MIT",
			"urls": [
				"bzz-raw://ce35503e67c73199e36b374d90fdba1449a42219a87cac83dd1940d90b5c4d7f",
				"dweb:/ipfs/QmaQ5VkFB6K8r8SmSW6EefFJgnhmwsZGaf9MNLo58at9KB"
			]
		},
		"src/libraries/math/PackedUint128Math.sol": {
			"keccak256": "0x58f0ee5bbb2d92c766419db9bf60685885f2f503cf59a2f9ee21a55cccf7da6a",
			"license": "MIT",
			"urls": [
				"bzz-raw://270cebf1bd2cc7318e1e198d1bb72fdc04c59642f891ad54cb5ba0ac15a457e0",
				"dweb:/ipfs/QmfEkyJ8pxuoYAbjeMrj3uoEYX63mJ5GCPBfdPCoWKcGch"
			]
		},
		"src/libraries/math/SafeCast.sol": {
			"keccak256": "0xb766fabcdae5b3f112529aee2b960676bb3e856c1cf7acbcea5912e0bd602257",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9e10644ad1dedd8c479e0a43f805487324325e6c0fc4563cb3e31973cb1962e",
				"dweb:/ipfs/QmaDRad21DDwHJFq1i7QV5xM7KVRJCHFzkJfw6CEk8VYCD"
			]
		},
		"src/libraries/math/Uint128x128Math.sol": {
			"keccak256": "0xa7cf73467bb5e81673936e1f8858f3e1527b201dd80b60c05cb12d8b6299d59a",
			"license": "MIT",
			"urls": [
				"bzz-raw://0d82b3b566be3a0c9374cb34ef19e62876ea020c03f8138bb6a57f4c8a999a94",
				"dweb:/ipfs/QmQwxpssza3hxtRwf1HQEwH1j7Vx5AELvELLTbbbz52KnU"
			]
		},
		"src/libraries/math/Uint256x256Math.sol": {
			"keccak256": "0x53673c6ee8410fa57e2be64120ee214648506d14467260d5f81cacbcd2a3c51f",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9c44d1bdc36e290edf212767c11d0e374804819f26fbdb8af2cfc78e3271cea",
				"dweb:/ipfs/QmPkmBujndep8jp2wcS63CiSCwYR2nXiGU7hQmz1UpFJ3M"
			]
		}
	},
	"version": 1
}